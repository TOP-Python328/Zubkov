СТАНДАРТНАЯ БИБЛИОТЕКА

  ==========  1  ==========  

Написать функцию с именем schedule, которая генерирует график проведения мероприятий по заданным условиям.

Данная функция предназначена для расчёта дат еженедельно повторяющихся событий.
Мы будем использовать данную функцию для генерации графиков занятий.

Функция принимает обязательным аргументом дату первого мероприятия в графике, обязательным аргументом один и более номеров дней недели, далее обязательным аргументом общее количество занятий, и необязательным аргументом формат строкового представления генерируемых дат.
    
    Дата первого мероприятия должна быть строго позиционным аргументом, передаётся в виде объекта datetime.date
    
    Первый номер дня недели должен быть строго позиционным аргументом. Последующие номера дней недели должны быть произвольным кортежем позиционных аргументов. Передаются в виде объектов int.
        
        Номера дней недели обозначают, какие дни каждой недели должны войти в график. 
        Используется система нумерации ISO: 1 — понедельник, 2 — вторник, ...
    
    Общее количество занятий должно быть строго ключевым аргументов, передаётся в виде объекта int
    
    Формат строкового представления дат должен быть строго ключевым аргументом, передаётся в виде объекта str, значение по умолчанию '%d/%m/%Y'

Помимо передаваемых аргументов, функция может использовать список vacations из глобального пространства имён, если такое имя существует в глобальном пространстве имён.
    
    В данном списке указываются периоды, которые должны быть исключены из графика.
    
    Элементами списка являются кортежи из двух элементов:
        vacations: list[tuple[datetime.date, datetime.timedelta]]
    
    Первый элемент — дата начала исключаемого периода. Второй элемент — длительность исключаемого периода. (см. пример теста)

Функция возвращает список строковых представлений дат в заданном формате.

Вы можете дополнительно реализовать любое количество вспомогательных функций с произвольными сигнатурами.

Примечание: не забывайте про встроенные функции globals(), any() и map(), а также про функции модуля itertools

Написанную функцию необходимо протестировать.

Пример теста:
    >>> vacations = [
    ...     (date(2023, 5, 1), timedelta(weeks=1)),
    ...     (date(2023, 7, 17), timedelta(weeks=1)),
    ... ]
    >>>
    >>> py321 = schedule(date(2023, 4, 1), 6, 7, total_days=70)
    >>>
    >>> len(py321)
    70
    >>> py321[28:32]
    ['15/07/2023', '16/07/2023', '29/07/2023', '30/07/2023']



  ==========  2  ==========  

Написать декоратор с именем exception_delay_repeat, который спустя полсекунды повторяет вызов декорируемой функции в случае возникновения исключения.

В случае если декорируемая функция корректно завершает работу с первого раза, повтор не нужен.

В случае прерывания первого вызова декорируемой функции из-за возникновения произвольного исключения, декоратор должен перехватить данное исключение, выждать полсекунды, после чего повторить вызов декорируемой функции с тем же набором аргументов, что и для первого вызова.

В случае прерывания и второго вызова декорируемой функции из-за возникновения произвольного исключения, декоратор должен перехватить данное исключение, после чего вывести в stdout имя класса исключения и текст исключения. Также в этом случае возвращаемое значение декорируемой функции должно быть None.

При успешном первом либо втором вызове возвращаемое значение декорируемой функции должно быть возвращено декоратором.

Подобная задача может возникать, например, при взаимодействии из декорируемой функции с сетевыми ресурсами.

Необходимо использовать декоратор wraps() из модуля functools для перезаписи инспектируемых атрибутов функции после декорирования.

Декоратор должен иметь возможность применяться к функциям с произвольным набором позиционных и ключевых аргументов.

Написанный декоратор необходимо протестировать с помощью дополнительной функции, которая может выбрасывать исключение.

Примеры тестов:
    >>> from random import randrange
    >>> 
    >>> def test_func():
    ...     if randrange(2):
    ...         raise ConnectionError('failure')
    ...     else:
    ...         return 'success'
    ... 
    >>> test_func
    <function test_func at 0x000001B1EEBBFBA0>
    >>>
    >>> test_func = exception_delay_repeat(test_func)
    >>> test_func
    <function test_func at 0x000001B1EEBBFCE0>
    >>> 
    >>> test_func()
    'success'
    >>> test_func()
    ConnectionError: failure



  ==========  3  ==========  

Написать функцию с именем load_data, которая читает из файлов данные и упорядочивает их.
Написать функцию с именем generate_person, которая генерирует анкету человека со случайными данными.

Имена, отчества и фамилии записаны в трёх текстовых файлах в текущем каталоге.
С помощью функции load_data() необходимо записать все эти данные в один словарь names в глобальном пространстве имён. 
Структуру словаря names продумайте самостоятельно — выберите самый, как вам кажется, удобный вариант для дальнейшей работы функции generate_person()

Функция load_data() не принимает аргументы.

Функция load_data() возвращает None.

Функция generate_person() не принимает аргументы.

Функция generate_person() возвращает словарь с анкетными данными.
    
    Ключи словаря:
        'имя': str
        'отчество': str
        'фамилия': str
        'пол': types.Literal['мужской', 'женский']
        'дата рождения': datetime.date
        'мобильный': str
        
        С помощью специального дженерика Literal из модуля types стандартной библиотеки можно перечислить конкретные значения, ожидаемые для аннотируемого идентификатора.

Условия генерации случайных данных:
    
    Имя, отчество и фамилия должны быть согласованы по полу человека.
    
    При генерации случайной даты рождения необходимо учитывать количество дней в каждом месяце с учётом високосного года.
    
    Для генерации года рождения используйте в качестве диапазона одно столетие.
    
    Формат мобильного номера +79xxxxxxxxx

Вы можете дополнительно реализовать любое количество вспомогательных функций с произвольными сигнатурами и любое количество вспомогательных структур данных.

Написанные функции необходимо протестировать.

Примеры тестов:
    >>> from pprint import pprint
    >>> 
    >>> load_data()
    >>> 
    >>> pprint(generate_person(), sort_dicts=False)
    {'имя': 'Аделаида',
     'отчество': 'Алексеевна',
     'фамилия': 'Эдемская',
     'пол': 'женский',
     'дата рождения': datetime.date(1947, 11, 5),
     'мобильный': '+79357908261'}
    >>> 
    >>> pprint(generate_person(), sort_dicts=False)
    {'имя': 'Марлен',
     'отчество': 'Харлампович',
     'фамилия': 'Садовский',
     'пол': 'мужской',
     'дата рождения': datetime.date(1973, 8, 16),
     'мобильный': '+79981756023'}
    >>> 



  ==========  4  ==========  дополнительно

Написать функцию с именем json_from_html, которая по заданному шаблону извлекает из HTML документа структурируемые данные и помещает их в JSON файл.

Получить HTTP ответ от удалённого сервера можно с помощью функции urlopen() из модуля urllib.request стандартной библиотеки
    https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen
    
    Функция urlopen() возвращает объект http.client.HTTPResponse — метод read() данного объекта возвращает тело ответа, являющееся в большинстве случаев HTML документом:
        https://docs.python.org/3/library/http.client.html#httpresponse-objects
    
    >>> from urllib.request import urlopen
    >>> 
    >>> with urlopen('https://www.python.org') as response:
    ...     html = response.read()
    ...
    >>> html[:55]
    b'<!doctype html>\n<!--[if lt IE 7]>   <html class="no-js '
    
    Метод read() возвращает объект bytes. Его можно преобразовать в строку с помощью метода decode() с передачей в качестве аргумента наименования кодировки:
        https://docs.python.org/3/library/stdtypes.html#bytes.decode
    
    >>> type(html)
    <class 'bytes'>
    >>> html = html.decode('utf-8')
    >>> type(html)
    <class 'str'>

Функция принимает обязательным аргументом URL, обязательным аргументом шаблон регулярного выражения и необязательным аргументом кодировку страницы.
    
    URL должен быть позиционно-ключевым аргументом, передаётся в виде объекта str. HTTP GET запрос по указанному адресу должен возвращать HTML документ.
    
    Шаблон регулярного выражения должен быть позиционно-ключевым аргументом, передаётся в виде объекта str.
        В шаблоне должно быть ровно две захватывающих группы.
    
    Кодировка страницы должна быть позиционно-ключевым аргументом, передаётся в виде объекта str, значение по умолчанию 'utf-8'

Функция возвращает путь к созданному JSON файлу в виде объекта Path.
    
    Имя создаваемого JSON файла должно быть взято из имени HTML файла в URL, если URL заканчивается на '.html'
    В противном случае, имя JSON файла должно быть эквивалентно имени файла текущего модуля без учёта расширения (см. тест ниже)
    
    Путь к файлу текущего модуля записан в атрибуте path объекта __loader__ в глобальном пространстве имён:
    >>> __loader__.path
    'D:\\G-Doc\\TOP Academy\\Python web\\q\\2023.06.29\\json_from_html.py'
    
    Во время записи в JSON файл обеспечьте запись всех символов UTF-8 и отступ два пробела на уровень отступа.

Для извлечения определённых данных из HTML документа используйте функцию findall() из модуля re стандартной библиотеки:
    https://docs.python.org/3/library/re.html#re.findall
    
    >>> data = findall(r'(\w)=(\d+)', 'i=0 j=1 k=2')
    >>> data
    [('i', '0'), ('j', '1'), ('k', '2')]
    
    Поскольку в каждом передаваемом в функцию json_from_html() шаблоне должно быть строго две захватывающих группы, то и элементами возвращаемого функцией findall() списка всегда будут кортежи из двух элементов.
    
    При вызове функции findall() воспользуйтесь флагом S из модуля re:
        https://docs.python.org/3/library/re.html#re.S
    
    >>> findall(r'\d.\d.\d', '0\n1\n2')
    []
    >>> findall(r'\d.\d.\d', '0\n1\n2', S)
    ['0\n1\n2']

Вы можете дополнительно реализовать любое количество вспомогательных функций с произвольными сигнатурами.

Примечание: не забывайте про встроенные функции globals(), any() и map(), а также про функции модуля itertools

Написанную функцию необходимо протестировать.

Примеры тестов:
    >>> url = 'https://docs.python.org/3/py-modindex.html'
    >>> modules_pattern = r'<tr>.+?>(\w+?)<.+?</td><td>.*?<em>(.*?)</em>'
    >>> 
    >>> file_path = json_from_html(url, modules_pattern)
    >>> 
    >>> file_path.name
    'py-modindex.json'
    >>> 
    >>> print(file_path.read_text(encoding='utf-8')[:110])
    {
      "__future__": "Future statement definitions",
      "__main__": "The environment where top-level code is run.
    >>> 
    >>> 
    >>> url = 'http://www.world-art.ru/cinema/rating_top.php'
    >>> films_pattern = (r'<tr .*?>'
    ...                  r'<td .*?<a.*?>(?P<name>.*?)</a>.*?</td>'
    ...                  r'<td .*?>(?P<rating>.*?)</td>')
    >>>
    >>> file_path = json_from_html(url, films_pattern)
    >>>
    >>> file_path.name
    'json_from_html.json'
    >>>
    >>> Path(__loader__.path).name
    'json_from_html.py'
    >>>
    >>> print(file_path.read_text(encoding='utf-8')[:110])
    {
      "Побег из Шоушенка": "8.9764",
      "Зелёная миля": "8.9561",
      "Форрест Гамп": "8.9066",
      "Леон": "8.8934",
    >>>



  ==========  5  ==========  дополнительно

Написать диспетчеризованную рекурсивную функцию с именем data_insert, которая добавляет случайные данные в произвольную структуру данных.

В произвольной структуре данных могут быть использованы типы данных, получаемые в результате декодирования файлов данных с помощью пакета json стандартной библиотеки:
    https://docs.python.org/3/library/json.html#encoders-and-decoders

Логика работы функции: при получении в качестве аргумента объекта базового типа функция генерирует случайный объект того же типа. При получении в качестве аргумента итерируемого объекта функция рекурсивно перебирает его элементы. 
Для словарей изменяются только значения, ключи остаются исходными.

Условия генерации случайных объектов:
  - int: от -10 до 10 не включая границы
  - float: от -math.pi до math.pi включая границы
  - str: "слово" длиной от 3 до 8 случайных латинских буквенных символов в любом регистре 
  - для всех прочих типов данных: сгенерировать True или False

Диспетчеризация осуществляется с помощью декоратора singledispatch:
    https://docs.python.org/3/library/functools.html#functools.singledispatch
    
    В диспетчеризованной функции прописывается отдельная реализация для каждого типа аргумента, переданного в функцию.
    
    >>> @singledispatch
    ... def test_func(arg):
    ...     return type(arg)
    ... 
    >>> @test_func.register
    ... def _(arg: int):
    ...     return arg**2
    ... 
    >>> test_func('abc')
    <class 'str'>
    >>> test_func(5)
    25
    
    В примере выше при передаче в test_func() аргументом объекта int будет вызвана вторая реализация функции. При передаче аргументом объекта любого другого типа будет вызвана первая (основная) реализация.

Функция принимает обязательным позиционно-ключевым аргументом объект произвольного типа данных.

Функция возвращает новый объект того же типа, что и переданный в качестве аргумента.

Написанную функцию необходимо протестировать.

Примеры тестов:
    >>> data_insert('')
    'tYMmSp'
    >>> 
    >>> data_insert(1.1)
    0.47255966320775844
    >>> 
    >>> n = ['', .0, {'k1': None, 'k2': ['', '']}, [0, 0]]
    >>> data_insert(n)
    ['hwg', 4.635261937318741, {'k1': True, 'k2': ['Etsex', 'VWSjP']}, [-3, 4]]
    >>> n
    ['', .0, {'k1': None, 'k2': ['', '']}, [0, 0]]

Напишите в комментарии ответ на вопрос: если реализовать аналогичную функцию, но без диспетчеризации, то какой вариант будет выполняться быстрее для одной и той же структуры данных? Аргументируйте ответ.



  =========================

Каждая функция должна быть документирована, её параметры и возвращаемое значение должны быть аннотированы.

Функции тестируются в режиме инспекции файла с кодом.
Ввод и вывод в стандартные потоки тестов и их результатов копируются.
Копия в виде комментария помещается в конец файла с кодом задачи.

Невыполнение дополнительных задач не повлечёт снижения баллов за задание. Тем не менее они настоятельно рекомендуются к решению.

В сервис Журнал отправляется сообщение о выполнении всех частей задания со ссылкой на репозиторий.

Преподаватель пишет комментарии и правки в коде задач и обновляет файлы в удалённом репозитории.
Регулярно получайте обновления в свой локальный репозиторий из удалённого репозитория.
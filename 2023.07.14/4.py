# ИСПОЛЬЗОВАТЬ везде: оформление кода согласно PEP 8 — в качестве образца можно использовать код из репозитория _scripts

cell_1 = input()
cell_2 = input()

# ПЕРЕИМЕНОВАТЬ: имена cell_3 и cell_4 вводят в заблуждение
cell_3 = cell_1[0]
cell_4 = cell_2[0]

number_1 = cell_1[1]
number_2 = cell_2[1]

# ИСПРАВИТЬ везде: круглые скобки используются для литерала кортежа, изменения порядка вычисления выражений, вызова функций и записи составного выражения на нескольких строчках — больше нигде и никак
# ИСПРАВИТЬ: здесь и далее уместнее использовать оператор проверки принадлежности in
if (cell_3 == 'a' or cell_3 == 'c' or cell_3 == 'e' or cell_3 == 'g'):
    figure = 1
# ИСПРАВИТЬ: этот блок должен быть зависимым от результата вычисления предыдущего блока, потому что проверяется значение одной и той же переменной
if (cell_3 == 'b' or cell_3 == 'd' or cell_3 == 'f' or cell_3 == 'h'):
    figure = 2

if (cell_4 == 'b' or cell_4 == 'd' or cell_4 == 'f' or cell_4 == 'h'):
    figure_1 = 2
# ИСПРАВИТЬ: этот блок должен быть зависимым от результата вычисления предыдущего блока, потому что проверяется значение одной и той же переменной
if (cell_4 == 'a' or cell_4 == 'c' or cell_4 == 'e' or cell_4 == 'g'):
    figure_1 = 1

# ИСПРАВИТЬ: проанализируйте свойства сумм чётных и нечётных чисел и упростите логическое выражение
if ((figure + int(number_1)) % 2 == (figure_1 + int(number_2)) % 2):
    print('да')
# ИСПРАВИТЬ: здесь уместнее блок else, а не самостоятельный блок if, логическое выражение которого гарантировано будет вычислено вне зависимости от результатов вычисления предыдущего
if ((figure + int(number_1)) % 2 != (figure_1 + int(number_2)) % 2):
    print('нет')


# a1
# b2
# да

# b1
# g3
# нет


# ИТОГ: нужно лучше, доработать — 3/6
